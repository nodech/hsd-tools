#!/usr/bin/env node

'use strict';

const path = require('path');
const os = require('os');
const {CLIError} = require('../lib/errors');
const {CLI} = require('../lib/cli');
const {Cache} = require('../lib/cache');
const util = require('../lib/utils/util');
const ansi = require('../lib/utils/ansi');

const HOME = os.homedir();

const restoreCursor = () => {
  if (process.stdout.isTTY)
    process.stdout.write(ansi.cursor.show);

  if (process.stderr.isTTY)
    process.stderr.write(ansi.cursor.show);
};

process.on('SIGINT', () => {
  restoreCursor();
  process.exit(1);
});

process.on('unhandledRejection', (err) => {
  restoreCursor();
  console.error(err);
  process.exit(3);
});

process.on('uncaughtException', (err) => {
  console.error(err);
  restoreCursor();
  process.exit(3);
});

let cli, cache;

(async () => {
  const config = util.getConfigs({
    argv: true,
    env: true,
    file: path.join(HOME, '.hs-tools.json')
  }, {
    alias: {
      'h': 'help',
      'f': 'force'
    }
  });

  const argv = config.argv;

  if (isHelp(config)) {
    process.stderr.write(help());
    process.stderr.write('\n');
    process.exit(1);
  }

  const options = {
    cwd: process.cwd()
  };

  const command = argv.shift();

  cache = new Cache({
    ...options,
    ignore: config.bool('cache-ignore', false)
  });

  cli = new CLI({
    ...options,
    stderr: process.stderr,
    stdout: process.stdout,
    force: config.bool('force', false),
    renderer: config.str('ui', null)
  });

  cli.init();
  cache.init();

  await cache.ensure();
  await cli.ensure();

  await cache.open();
  await cli.start();

  switch (command) {
    case 'depcheck': {
      await cli.run('depcheck', {
        ...options,
        cache: cache,
        ghuser: config.str('ghuser', ''),
        ghkey: config.str('ghkey', ''),
        ghconc: config.str('ghconcurrent', 2),
        npmconc: config.str('npmconcurrent', 2)
      });
      break;
    }

    case 'git': {
      const subcmd = argv.shift();

      switch (subcmd) {
        case 'prlog': {
          await cli.run('git prlog', {
            ...options,
            cache: cache,
            ghuser: config.str('ghuser', ''),
            ghkey: config.str('ghkey', ''),
            ghconc: config.str('ghconcurrent', 2),
            remote: config.str('remote', 'origin'),
            longID: config.bool('longid', false)
          });
          break;
        }
        default: {
          throw new CLIError(
            `Subcommand "${subcmd}" of git not found. Check "help"`);
        }
      }

      break;
    }

    case 'genseeds': {
      await cli.run('genseeds', {
        ...options,
        cache: cache,
        format: config.str('format', 'ui'),
        sort: config.str('sort', 'uptime'),

        noCategories: config.bool('no-categories', false),

        ignoreMain: config.bool('ignore-main', false),
        ignoreGen: config.bool('ignore-gen', false),
        ignoreOther: config.bool('ignore-other', false),

        filterPruned: config.bool('filter-pruned', true),
        filterUptime: config.float('filter-uptime', 0),
        filterOnline: config.bool('filter-online', false),
        filterHeight: config.int('filter-height', 0)
      });
      break;
    }

    case 'checkseeds': {
      await cli.run('checkseeds', {
        ...options,
        cache: cache,
        seeds: argv
      });
      break;
    }

    case 'example': {
      await cli.run('example');
      break;
    }
    default:
      throw new CLIError(`Command "${command}" not found. Check "help".`);
  }

  await cli.stop();
  await cache.close();
})().catch(async (e) => {
  restoreCursor();

  if (e instanceof CLIError) {
    if (e.command)
      console.error(`Command "${e.command}" error:`);

    console.error(e.message);
    process.exit(1);
  }

  throw e;
}).catch((e) => {
  console.error(e);
  process.exit(2);
});

function help() {
  return `hs-tools [tool options] command [command options]
Commands:
  help                   - Show this help.
  git                    - Git related subcommands
  depcheck               - Check dependencies of the pkg.
  genseeds               - Generate seeds for hsd network.
    --format             - Output format: ui, seeds
    --sort               - Sort by: uptime, height, ip
    --no-categories      - Do not group by categories
    --ignore-main        - Ignore main seeds
    --ignore-gen         - Ignore generated seeds
    --ignore-other       - Ignore other seeds
    --filter-pruned      - Filter pruned seeds (default: true)
    --filter-uptime      - Filter by uptime (default: 0)%
    --filter-online      - Filter online seeds (default: false)

  checkseeds [seeds..]   - Check hsd network seeds.

Git subcommands:
  prlog                  - Log formatted by PRs
    --remote [=origin]   - Which remote to use.
    --groupbypr          - Group Commits by pr
    --longid             - Log full commit hash
    Github options bellow...

Options:
  -h, --help             - show help
  -f, --force            - Ignore lock
  --ui=<type>            - text or loader

General options:
  --ghuser               - GH API User
  --ghkey                - GH API Key
  --ghconcurrent         - Concurrent requests to send to the API.
  --npmconcurrent        - Concurrent requests to send to the NPM.

NOTE:
  Any above configuration can be stored in a config filed at
$HOME/.hs-tools.json. Example: {"ghuser": "user", "ghkey" : "apikey.."}

`;
}

function isHelp(config) {
  if (config.bool('help'))
    return true;

  if (config.argv.length === 0)
    return true;

  if (config.argv[0] === 'help')
    return true;

  return false;
}
